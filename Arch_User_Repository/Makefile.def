############################################################################
#
#  Program:  OpenSees
#
#  Purpose:  A Top-level Makefile to create the libraries needed
#	     to use the OpenSees framework. Works for ArchLinux,
#	     modified to use the OpenGl libraries.
#
#  Written: mickele
#  Created: 12/2014
#  Modified: nemaarpit
#  Last modified: 08/2021
#
#  Send bug reports, comments or suggestions to
#  https://aur.archlinux.org/packages/opensees/
#
# Notes:
#		1. Reliability?
#		2. Optimization?
############################################################################

# %---------------------------------%
# |  SECTION 1: PROGRAM             |
# %---------------------------------%
#
# Specify the location and name of the OpenSees interpreter program
# that will be created (if this all works!)

# INTERPRETER_LANGUAGE is used to add fpic flag for python
#INTERPRETER_LANGUAGE = PYTHON
INTERPRETER_LANGUAGE = TCL

OpenSees_PROGRAM = $(INSTALLDIR)/bin/OpenSees

# %---------------------------------%
# |  SECTION 2: MAKEFILE CONSTANTS  |
# %---------------------------------%
#
# Specify the constants the are used as control structure variables in the Makefiles.

OPERATING_SYSTEM = LINUX

# GRAPHICS = UsingOpenGL, UsingX11, NONE
GRAPHICS = NONE

# PROGRAMMING_MODE = SEQUENTIAL, THREADS, PARALLEL_INTERPRETERS, PARALLEL
PROGRAMMING_MODE = SEQUENTIAL

# COMPILER constant unused. Adapt for optional ICC/AMD compiler
# COMPILER = GCC
COMPILER = GCC

#DEBUG_MODE = DEBUG, NO_DEBUG
DEBUG_MODE = NO_DEBUG

#RELIABILITY = YES_RELIABILITY, NO_RELIABILITY
# Need YES_RELIABILITY for pythonmodule
RELIABILITY = YES_RELIABILITY

# %---------------------------------%
# |  SECTION 3: PATHS               |
# %---------------------------------%
#
# Note: if vendor supplied BLAS and LAPACK libraries or if you have
# any of the libraries already leave the directory location blank AND
# remove the directory from DIRS.

BASE		= /usr
HOME		= $(SRCDIR)
FE			= $(SRCDIR)/OpenSees/SRC

SRCdir       = $(HOME)/OpenSees/SRC
AMDdir       = 
BLASdir      = 
CBLASdir     = 
LAPACKdir    = 
SUPERLUdir   = 
ARPACKdir    = 
UMFPACKdir   = 
METISdir     = 
CSPARSEdir   = 
BLITZdir     =
OPTIMIZATIONdir =
SUPERLU_DISTdir = 

ifeq ($(PROGRAMMING_MODE), THREADS)
    SUPERLUdir   = $(HOME)/OpenSees/OTHER/SuperLU_MT
endif

ifeq ($(PROGRAMMING_MODE), SEQUENTIAL)
    SUPERLU_DISTdir = 
else
    SUPERLU_DISTdir   = $(HOME)/OpenSees/OTHER/SuperLU_DIST_4.3/SRC
endif

DIRS = $(BLASdir) $(CBLASdir) $(LAPACKdir) $(AMDdir) $(CSPARSEdir) \
       $(SUPERLUdir) $(ARPACKdir) $(UMFPACKdir) $(METISdir) $(SRCdir) \
       $(SUPERLU_DISTdir)

# %-------------------------------------------------------%
# | SECTION 4: LIBRARIES                                  |
# |                                                       |
# | The following section defines the libraries that will |
# | be created and/or linked with when the libraries are  | 
# | being created or linked with.                         |
# %-------------------------------------------------------%
#
# Note: if vendor supplied BLAS and LAPACK libraries leave the
# libraries blank. You have to get your own copy of the tcl/tk 
# library!! 
#
# Note: For libraries that will be created (any in DIRS above)
# make sure the directory exsists where you want the library to go!

FE_LIBRARY      = $(HOME)/lib/libOpenSees.a
# <Un-used>
NDARRAY_LIBRARY = $(HOME)/lib/libndarray.a # BJ_UCD jeremic@ucdavis.edu
MATMOD_LIBRARY  = $(HOME)/lib/libmatmod.a  # BJ_UCD jeremic@ucdavis.edu
BJMISC_LIBRARY  = $(HOME)/lib/libBJmisc.a  # BJ_UCD jeremic@ucdavis.edu
# </Un-used>
AMD_LIBRARY     = -lamd
BLAS_LIBRARY    = -lblas
CBLAS_LIBRARY   = -lcblas
LAPACK_LIBRARY  = -llapack
SUPERLU_LIBRARY = -lsuperlu
ARPACK_LIBRARY  = -larpack
UMFPACK_LIBRARY = -lumfpack
METIS_LIBRARY   = -lmetis
CSPARSE_LIBRARY = -lcxsparse
BLITZ_LIBRARY   =
DISTRIBUTED_SUPERLU_LIBRARY = 
TCL_LIBRARY     = -ltk -ltcl
# No linking against python library from 3.8+ for modules
PYTHON_LIBRARY  =


ifeq ($(PROGRAMMING_MODE), SEQUENTIAL)
    DISTRIBUTED_SUPERLU_LIBRARY = 
else
    DISTRIBUTED_SUPERLU_LIBRARY = $(HOME)/lib/libDistributedSuperLU.a
endif

ifeq ($(GRAPHICS), UsingOpenGL)
    GRAPHIC_LIBRARY = -lGL -lGLU -lX11
else
    ifeq ($(GRAPHICS), UsingX11)
        GRAPHIC_LIBRARY = -lX11
    endif
endif

ifeq ($(RELIABILITY), YES_RELIABILITY)
    RELIABILITY_LIBRARY = $(HOME)/lib/libReliability.a
    OPTIMIZATION_LIBRARY      = $(HOME)/lib/libOptimization.a
else
    RELIABILITY_LIBRARY = 
    OPTIMIZATION_LIBRARY =
endif

#METIS_LIBRARY   = -lmetis
#LAPACK_LIBRARY  = -llapack
#AMD_LIBRARY     = -lamd


# WATCH OUT .. These libraries are removed when 'make wipe' is invoked.
WIPE_LIBS      = $(FE_LIBRARY) \
				 $(RELIABILITY_LIBRARY) \
				 $(OPTIMIZATION_LIBRARY) 
#				 $(AMD_LIBRARY) \
#				 $(LAPACK_LIBRARY) \
#				 $(BLAS_LIBRARY) \
#				 $(CBLAS_LIBRARY) \
#				 $(SUPERLU_LIBRARY) \
#				 $(ARPACK_LIBRARY) \
#				 $(UMFPACK_LIBRARY) \
#				 $(CSPARSE_LIBRARY) \
#				 $(METIS_LIBRARY)

# %-------------------------------------------------------%
# | SECTION 4.1: HEADERS                                  |
# |                                                       |
# | The following section defines the include directories |
# | for headers needed for compilation.                   |
# %-------------------------------------------------------%

# FE_INCLUDES defined in 4.9

#NDARRAY_INCLUDE = $(HOME)/lib/libndarray.a # BJ_UCD jeremic@ucdavis.edu
#MATMOD_INCLUDE  = $(HOME)/lib/libmatmod.a  # BJ_UCD jeremic@ucdavis.edu
#BJMISC_INCLUDE  = $(HOME)/lib/libBJmisc.a  # BJ_UCD jeremic@ucdavis.edu
#LAPACK_INCLUDE  = -I$(LAPACKdir)
#BLAS_INCLUDE    = -I$(BLASdir)
SUPERLU_INCLUDE = -I$(BASE)/include/superlu
#CBLAS_INCLUDE   = -I$(CBLASdir)
#ARPACK_INCLUDE  = -I$(ARPACKdir)
AMD_INCLUDE     = -I$(BASE)/include
UMFPACK_INCLUDE = -I$(BASE)/include
METIS_INCLUDE   = -I$(BASE)/include
CSPARSE_INCLUDE = -I$(BASE)/include
BLITZ_INCLUDE   = 
OPTIMIZATION_INCLUDE      = 
TCL_INCLUDES    := $(shell pkgconf --cflags tk)
PYTHON_INCLUDES := $(shell pkgconf --cflags python3)

# LAPACK_INCLUDE,BLAS_INCLUDE, CBLAS_INCLUDE, ARPACK_INCLUDE,AMD_INCLUDE, CSPARSE_INCLUDE not needed?
# AMD : part of suitesparse, headers in /usr/include
# BLAS: official package - blas has no headers, openblas has headers in /usr/include, 
# CBLAS: official package - headers in /usr/include
# LAPACK: official package -  no headers
# SUPERLU: official package, headers in /usr/include/superlu
# ARPACK: official package has headers in /usr/include/arpack
# UMFPACK: part of suitesparse, headers in /usr/include
# METIS: official package, headers in /usr/include
# CSPARSE: part of suitesparse. No csparse, use cxsparse with patch for PFEM?

#METIS_INCLUDE   = -I/usr/include/


# %---------------------------------------------------------%
# | SECTION 4.2: OTHER LIBRARIES                            |
# |                                                         |
# | The following macros specify other libraries that must  |
# | be linked with when creating executables. These are     |
# | platform specific and typically order does matter!!     |
# %---------------------------------------------------------%
ifeq ($(PROGRAMMING_MODE), SEQUENTIAL)
    HAVEMUMPS = NO
    MUMPS_FLAG = 
    MUMPS_INCLUDE =
    MUMPS_LIB = 
    DISTSUPERLU_INCLUDE = 
else
    HAVEMUMPS = YES
    DISTSUPERLU_INCLUDE = -I$(SUPERLU_DISTdir)
endif

ifeq ($(HAVEMUMPS), YES)
    MUMPS = YES
    MUMPS_FLAG = -D_MUMPS -D_OPENMPI
    MUMPS_DIR = /usr
    SCOTCH_INCLUDE = /usr/include/scotch
    MUMPS_LIB = -L$(MUMPS_DIR)/lib -ldmumps -lmumps_common -lptesmumps -lptscotch -lptscotcherr -lscotch -lpord -lscalapack
    MUMPS_INCLUDE = -I$(MUMPS_DIR)/include -I$(SCOTCH_INCLUDE)
endif

MACHINE_LINKLIBS = -L$(BASE)/lib -L$(HOME)/lib 

MACHINE_NUMERICAL_LIBS  = $(RELIABILITY_LIBRARY) -lm \
			  $(ARPACK_LIBRARY) \
			  $(SUPERLU_LIBRARY) \
			  $(UMFPACK_LIBRARY) \
			  $(LAPACK_LIBRARY) $(BLAS_LIBRARY) $(CBLAS_LIBRARY) \
			  $(GRAPHIC_LIBRARY) $(OPTIMIZATION_LIBRARY) \
			  $(AMD_LIBRARY) \
			  $(METIS_LIBRARY) \
			  $(CSPARSE_LIBRARY) \
			  -ldl -lgfortran -lpng

ifeq ($(PROGRAMMING_MODE), SEQUENTIAL)
    PARALLEL_LIB = 
else ifeq ($(PROGRAMMING_MODE), PARALLEL)
    PARALLEL_LIB = -lmetis -lparmetis $(MUMPS_LIB) -lmpi -lmpi_mpifh $(DISTRIBUTED_SUPERLU_LIBRARY)
else ifeq ($(PROGRAMMING_MODE), PARALLEL_INTERPRETERS)
    PARALLEL_LIB = -lmetis -lparmetis $(MUMPS_LIB) -lmpi -lmpi_mpifh $(DISTRIBUTED_SUPERLU_LIBRARY)
endif

ifeq ($(PROGRAMMING_MODE), THREADS)
    MACHINE_SPECIFIC_LIBS = -lpthread
else
    MACHINE_SPECIFIC_LIBS = 
endif


# %---------------------------------------------------------%
# | SECTION 4.9: INCLUDE FILES                              |
# |                                                         |
# | The following macros specify include files needed for   |
# | compilation.                                            |
# %---------------------------------------------------------%

MACHINE_INCLUDES =  -I$(BASE)/include \
					$(UMFPACK_INCLUDE) \
					$(SUPERLU_INCLUDE) \
					$(DISTSUPERLU_INCLUDE) \
					$(MUMPS_INCLUDE) \
					$(METIS_INCLUDE) \
					$(BLITZ_INCLUDE)

# this file contains all the OpenSees/SRC includes FE_INCLUDES
include $(FE)/Makefile.incl

INCLUDES = $(TCL_INCLUDES) $(FE_INCLUDES) $(MACHINE_INCLUDES) $(PYTHON_INCLUDES)

# %---------------------------------------------------------%
# | SECTION 5: COMPILERS                                    |
# |                                                         |
# | The following macros specify compilers, linker/loaders, |
# | the archiver, and their options.  You need to make sure |
# | these are correct for your system.                      |
# %---------------------------------------------------------%

# Compilers
ifeq ($(PROGRAMMING_MODE), SEQUENTIAL)
    CC++	= /usr/bin/g++
    CC          = /usr/bin/gcc
    FC	        = /usr/bin/gfortran
else
    CC++        =  mpicxx
    CC          =  mpicc
    FC          =  mpif90
    F90         =  mpif90
    FORTRAN     =  $(FC)
endif

AR		= ar 
ARFLAGS		= cqls
RANLIB		= ranlib
RANLIBFLAGS     = 

# Compiler Flags
#
# NOTES:
#    C++ FLAGS TAKE need _UNIX or _WIN32 for preprocessor directives
#         - the _WIN32 for the Windows95/98 or NT operating system.
#    C FLAGS used -DUSE_VENDOR_BLAS (needed in SuperLU) if UNIX in C++ FLAGS
#

ifeq ($(DEBUG_MODE), DEBUG)

    C++FLAGS        = -Wall -g -pg -D_UNIX -D_LINUX -std=c++11 \
		              $(GRAPHIC_FLAG) $(RELIABILITY_FLAG) $(DEBUG_FLAG) $(PROGRAMMING_FLAG) \
		              -ffloat-store -fpermissive -fPIC

    CFLAGS          = -Wall -g -pg $(GRAPHIC_FLAG) $(RELIABILITY_FLAG) $(DEBUG_FLAG) $(PROGRAMMING_FLAG) -fPIC
    FFLAGS          = -Wall -fPIC

    # Linker
    LINKER          = $(CC++)
    LINKFLAGS       = -g -pg -fPIC

else

    # modified as optimizaton currently causing problems with Steel01 code
    C++FLAGS        = -march=native -mtune=native -Wall -O3 -D_UNIX -D_LINUX -std=c++11 \
    		          $(GRAPHIC_FLAG) $(RELIABILITY_FLAG) $(DEBUG_FLAG) $(PROGRAMMING_FLAG) \
    	              -ffloat-store -fpermissive -fPIC

    CFLAGS          = -march=native -mtune=native -Wall -O3 $(GRAPHIC_FLAG) $(RELIABILITY_FLAG) $(DEBUG_FLAG) $(PROGRAMMING_FLAG) -fPIC
    FFLAGS          = -march=native -mtune=native -Wall -O3 -fPIC -fallow-argument-mismatch

    # Linker
    LINKER          = $(CC++)
    LINKFLAGS       = -fPIC

endif


#GRAPHICS = UsingOpenGL, UsingX11, NONE
ifeq ($(GRAPHICS), UsingOpenGL)
    GRAPHIC_FLAG = -D_GLX
else
    ifeq ($(GRAPHICS), UsingX11)
        GRAPHIC_FLAG = -D_X11
    else
        GRAPHIC_FLAG = -D_NOGRAPHICS
    endif
endif

ifeq ($(PROGRAMMING_MODE), THREADS)
    PROGRAMMING_FLAG = -D_THREADS -D_PTHREAD -DUSE_INTERP_RESULT
else
    PROGRAMMING_FLAG = -DUSE_INTERP_RESULT
endif

ifeq ($(PROGRAMMING_MODE), PARALLEL)
    PROGRAMMING_FLAG = -D_PARALLEL_PROCESSING -DUSE_INTERP_RESULT -D_MUMPS -D_OPENMPI
endif

ifeq ($(PROGRAMMING_MODE), PARALLEL_INTERPRETERS)
    PROGRAMMING_FLAG = -D_PARALLEL_INTERPRETERS -DUSE_INTERP_RESULT -D_MUMPS -D_OPENMPI
endif

ifeq ($(DEBUG_MODE), DEBUG)
    DEBUG_FLAG = -D_G3DEBUG
else
    DEBUG_FLAG =
endif

ifeq ($(RELIABILITY), YES_RELIABILITY)
    RELIABILITY_FLAG = -D_RELIABILITY
else
    RELIABILITY_FLAG =
endif

# Misc
MAKE		= make
CD              = cd
ECHO            = echo
RM              = rm
RMFLAGS         = -f
SHELL           = /bin/sh

# %---------------------------------------------------------%
# | SECTION 6: COMPILATION                                  |
# |                                                         |
# | The following macros specify the macros used in         |
# | to compile the source code into object code.            |
# %---------------------------------------------------------%

.SUFFIXES:
.SUFFIXES:	.C .c .f .f90 .cpp .o .cpp

#
# %------------------%
# | Default command. |
# %------------------%
#
.DEFAULT:
	@$(ECHO) "Unknown target $@, try:  make help"
#
# %-------------------------------------------%
# |  Command to build .o files from .f files. |
# %-------------------------------------------%
#

.cpp.o:
	@$(ECHO) Making $@ from $<
	$(CC++) $(C++FLAGS) $(INCLUDES) -c $< -o $@

.C.o:
	@$(ECHO) Making $@ from $<
	$(CC++) $(C++FLAGS) $(INCLUDES) -c $< -o $@
.c.o:
	@$(ECHO) Making $@ from $<
	$(CC) $(CFLAGS) -c $< -o $@
.f.o:      
	@$(ECHO) Making $@ from $<
	$(FC) $(FFLAGS) -c $< -o $@


